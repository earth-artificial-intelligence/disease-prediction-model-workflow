[{
  "id" : "7624xp",
  "name" : "data-retrieval",
  "description" : null,
  "code" : "# Write your first Python code in Geoweaver\nimport pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndf = pd.read_excel('~/research/disease-prediction/raw_data.xlsx')\nprint(df.head())\ndata = df.fillna(method='ffill')\nprint('after filling null values\\n')\nprint(data.head())\ndata.to_csv('~/research/disease-prediction/data-withoutnull')\n",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "wiuage",
  "name" : "preprocess-data",
  "description" : null,
  "code" : "# Write your first Python code in Geoweaver\nfrom collections import defaultdict\nimport pandas as pd\nimport numpy as np\nimport os\nimport csv\n\ndata = pd.read_csv('~/research/disease-prediction/data-withoutnull')\n\n\ndef process_data(data):\n    data_list = []\n    data_name = data.replace('^','_').split('_')\n    n = 1\n    for names in data_name:\n        if (n % 2 == 0):\n            data_list.append(names)\n        n += 1\n    return data_list\n\ndisease_list = []\ndisease_symptom_dict = defaultdict(list)\ndisease_symptom_count = {}\ncount = 0\n\n# if os.path.exists(\"myfile.dat\"):\n#     print(\"skip already exist\")\n# else:\n#     f = file(\"myfile.dat\", \"w\")\n\nfor idx, row in data.iterrows():\n    \n    # Get the Disease Names\n    if (row['Disease'] !=\"\\xc2\\xa0\") and (row['Disease'] != \"\"):\n        disease = row['Disease']\n        disease_list = process_data(data=disease)\n        count = row['Count of Disease Occurrence']\n\n    # Get the Symptoms Corresponding to Diseases\n    if (row['Symptom'] !=\"\\xc2\\xa0\") and (row['Symptom'] != \"\"):\n        symptom = row['Symptom']\n        symptom_list = process_data(data=symptom)\n        for d in disease_list:\n            for s in symptom_list:\n                disease_symptom_dict[d].append(s)\n            disease_symptom_count[d] = count\n    \n# file_path = os.path.expanduser('~/research/disease-prediction/cleaned_data.csv')\nhomedir = os.path.expanduser('~')\nf = open(f'{homedir}/research/disease-prediction/cleaned_data.csv', 'w')\n\nwith f:\n    writer = csv.writer(f)\n    for key, val in disease_symptom_dict.items():\n        for i in range(len(val)):\n            writer.writerow([key, val[i], disease_symptom_count[key]])\n\ndf = pd.read_csv('~/research/disease-prediction/cleaned_data.csv')\ndf.columns = ['disease', 'symptom', 'occurence_count']\nprint(df.head())\n\n# Remove any rows with empty values\ndf.replace(float('nan'), np.nan, inplace=True)\ndf.dropna(inplace=True)\n\ndf.to_csv(f'{homedir}/research/disease-prediction/cleaned_data.csv')\n\n",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "hv7zjp",
  "name" : "encoder",
  "description" : null,
  "code" : "# Write your first Python code in Geoweaver\nfrom sklearn import preprocessing\nimport pandas as pd\nimport os\nimport numpy as np\n\nhomedir = os.path.expanduser('~')\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/cleaned_data.csv')\nn_unique = len(df['symptom'].unique())\nprint(n_unique)\nprint(df.dtypes)\n\n# Encode the Labels\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\nlabel_encoder = LabelEncoder()\ninteger_encoded = label_encoder.fit_transform(df['symptom'])\nprint(integer_encoded)\n\n# # One Hot Encode the Labels\nonehot_encoder = OneHotEncoder(sparse_output=False)\ninteger_encoded = integer_encoded.reshape(len(integer_encoded), 1)\nonehot_encoded = onehot_encoder.fit_transform(integer_encoded)\nprint(onehot_encoded)\n\n# print\n# print(onehot_encoded[0])\nprint('length of onehot encoded',len(onehot_encoded[0]))\n\ncols = np.asarray(df['symptom'].unique())\nprint(cols)\n\n# Create a new dataframe to save OHE labels\ndf_ohe = pd.DataFrame(columns = cols)\nprint(df_ohe.head())\n\n\nfor i in range(len(onehot_encoded)):\n    df_ohe.loc[i] = onehot_encoded[i]\n\nprint(df_ohe.head())\n\nprint('ohe', len(df_ohe))\n\n# Disease Dataframe\ndf_disease = df['disease']\nprint(df_disease.head())\n\n# Concatenate OHE Labels with the Disease Column\ndf_concat = pd.concat([df_disease,df_ohe], axis=1)\nprint(df_concat.head())\n\n\ndf_concat.drop_duplicates(keep='first',inplace=True)\nprint(df_concat.head())\nprint(len(df_concat))\n\ncols = df_concat.columns\nprint(cols)\ncols = cols[1:]\n\n# Since, every disease has multiple symptoms, combine all symptoms per disease per row\ndf_concat = df_concat.groupby('disease').sum()\ndf_concat = df_concat.reset_index()\nprint(df_concat[:5])\n\ndf_concat.to_csv(f'{homedir}/research/disease-prediction/training-data.csv', index=False)\nprint('training data successfully created')\n\n",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "frv7ut",
  "name" : "disease-training",
  "description" : null,
  "code" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(\"symptoms\")\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n# Save the test data to files\ndump(X_test, f'{homedir}/research/disease-prediction/X_test.joblib')\ndump(y_test, f'{homedir}/research/disease-prediction/y_test.joblib')\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "7k5p70",
  "name" : "test-disease-prediction-model",
  "description" : null,
  "code" : "# Write your first Python code in Geoweaver\nfrom joblib import dump, load\nimport os\nhomedir = os.path.expanduser('~')\n\n# Load the model from the file\nclf_dt = load(f'{homedir}/research/disease-prediction/modal.joblib')\n# Load the test data from files\nX_test = load(f'{homedir}/research/disease-prediction/X_test.joblib')\ny_test = load(f'{homedir}/research/disease-prediction/y_test.joblib')\n\n\n\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))",
  "lang" : "python",
  "owner" : "111111",
  "confidential" : "FALSE"
}]
