[{
  "history_id" : "ck8fszbw9qi",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(\"symptoms\")\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n# Save the test data to files\ndump(X_test, f'{homedir}/research/disease-prediction/X_test.joblib')\ndump(y_test, f'{homedir}/research/disease-prediction/y_test.joblib')\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "symptoms\nIndex(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: anxiety state\nActual: bipolar disorder\nPred: hypertension pulmonary\nActual: endocarditis\nPred: deep vein thrombosis\nActual: pneumonia\nPred: hypercholesterolemia\nActual: ischemia\nPred: incontinence\nActual: colitis\nPred: overload fluid\nActual: kidney failure acute\nPred: thrombus\nActual: kidney disease\nPred: schizophrenia\nActual: paranoia\nPred: acquired immuno-deficiency syndrome\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: hyperlipidemia\nActual: hypertensive disease\nPred: accident cerebrovascular\nActual: hemiparesis\nPred: tonic-clonic epilepsy\nActual: cirrhosis\nPred: schizophrenia\nActual: manic disorder\nPred: thrombus\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: failure heart congestive\nActual: paroxysmal dyspnea\nPred: malignant neoplasms\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: accident cerebrovascular\nActual: confusion\nPred: coronary arteriosclerosis\nActual: gastroesophageal reflux disease\nPred: thrombus\nActual: delirium\nPred: failure heart\nActual: insufficiency renal\nPred: chronic alcoholic intoxication\nActual: delusion\nPred: septicemia\nActual: dementia\nPred: thrombus\nActual: cellulitis\nPred: malignant neoplasms\nActual: melanoma\nPred: malignant neoplasms\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: primary carcinoma of the liver cells\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717471683699,
  "history_end_time" : 1717471685887,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "5gx3lrf47l3",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(\"symptoms\")\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n# Save the test data to files\ndump(X_test, f'{homedir}/research/disease-prediction/X_test.joblib')\ndump(y_test, f'{homedir}/research/disease-prediction/y_test.joblib')\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "symptoms\nIndex(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: psychotic disorder\nActual: bipolar disorder\nPred: pancreatitis\nActual: endocarditis\nPred: spasm bronchial\nActual: pneumonia\nPred: hypercholesterolemia\nActual: ischemia\nPred: infection urinary tract\nActual: colitis\nPred: failure kidney\nActual: kidney failure acute\nPred: hypercholesterolemia\nActual: kidney disease\nPred: chronic alcoholic intoxication\nActual: paranoia\nPred: thrombocytopaenia\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: biliary calculus\nActual: hypertensive disease\nPred: aphasia\nActual: hemiparesis\nPred: hemorrhoids\nActual: cirrhosis\nPred: pyelonephritis\nActual: manic disorder\nPred: pyelonephritis\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: cardiomyopathy\nActual: paroxysmal dyspnea\nPred: degenerative polyarthritis\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: accident cerebrovascular\nActual: confusion\nPred: neoplasm\nActual: gastroesophageal reflux disease\nPred: pyelonephritis\nActual: delirium\nPred: hemorrhoids\nActual: insufficiency renal\nPred: chronic alcoholic intoxication\nActual: delusion\nPred: failure heart congestive\nActual: dementia\nPred: anxiety state\nActual: cellulitis\nPred: pyelonephritis\nActual: melanoma\nPred: bacteremia\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: accident cerebrovascular\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717470597292,
  "history_end_time" : 1717470599097,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lcek2ehky9a",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(\"symptoms\")\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n# Save the test data to files\ndump(X_test, f'{homedir}/research/disease-prediction/X_test.joblib')\ndump(y_test, f'{homedir}/research/disease-prediction/y_test.joblib')\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "symptoms\nIndex(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: psychotic disorder\nActual: bipolar disorder\nPred: infection\nActual: endocarditis\nPred: upper respiratory infection\nActual: pneumonia\nPred: peripheral vascular disease\nActual: ischemia\nPred: pyelonephritis\nActual: colitis\nPred: fibroid tumor\nActual: kidney failure acute\nPred: pancreatitis\nActual: kidney disease\nPred: schizophrenia\nActual: paranoia\nPred: cholecystitis\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: peripheral vascular disease\nActual: hypertensive disease\nPred: accident cerebrovascular\nActual: hemiparesis\nPred: overload fluid\nActual: cirrhosis\nPred: pancreatitis\nActual: manic disorder\nPred: infection urinary tract\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: failure heart congestive\nActual: paroxysmal dyspnea\nPred: malignant neoplasms\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: accident cerebrovascular\nActual: confusion\nPred: myocardial infarction\nActual: gastroesophageal reflux disease\nPred: pancreatitis\nActual: delirium\nPred: cholecystitis\nActual: insufficiency renal\nPred: schizophrenia\nActual: delusion\nPred: failure heart congestive\nActual: dementia\nPred: pyelonephritis\nActual: cellulitis\nPred: malignant neoplasms\nActual: melanoma\nPred: overload fluid\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: accident cerebrovascular\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717470449926,
  "history_end_time" : 1717470451765,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xzxb6v3nb7t",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(\"symptoms\")\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n# Save the test data to files\ndump(X_test, f'{homedir}/research/disease-prediction/X_test.joblib')\ndump(y_test, f'{homedir}/research/disease-prediction/y_test.joblib')\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "symptoms\nIndex(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: depression mental\nActual: bipolar disorder\nPred: gastritis\nActual: endocarditis\nPred: migraine disorders\nActual: pneumonia\nPred: peripheral vascular disease\nActual: ischemia\nPred: hernia\nActual: colitis\nPred: neutropenia\nActual: kidney failure acute\nPred: migraine disorders\nActual: kidney disease\nPred: suicide attempt\nActual: paranoia\nPred: migraine disorders\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: diabetes\nActual: hypertensive disease\nPred: accident cerebrovascular\nActual: hemiparesis\nPred: osteoporosis\nActual: cirrhosis\nPred: diverticulosis\nActual: manic disorder\nPred: bronchitis\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: failure heart\nActual: paroxysmal dyspnea\nPred: hernia\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: benign prostatic hypertrophy\nActual: confusion\nPred: ileus\nActual: gastroesophageal reflux disease\nPred: diverticulosis\nActual: delirium\nPred: thrombocytopaenia\nActual: insufficiency renal\nPred: depression mental\nActual: delusion\nPred: Alzheimer's disease\nActual: dementia\nPred: gout\nActual: cellulitis\nPred: migraine disorders\nActual: melanoma\nPred: osteoporosis\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: accident cerebrovascular\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717470316688,
  "history_end_time" : 1717470318524,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "r7woopv09sq",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(\"symptoms\")\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n# Save the test data to files\ndump(X_test, f'{homedir}/research/disease-prediction/X_test.joblib')\ndump(y_test, f'{homedir}/research/disease-prediction/y_test.joblib')\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "symptoms\nIndex(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: psychotic disorder\nActual: bipolar disorder\nPred: failure heart congestive\nActual: endocarditis\nPred: asthma\nActual: pneumonia\nPred: hypercholesterolemia\nActual: ischemia\nPred: carcinoma prostate\nActual: colitis\nPred: overload fluid\nActual: kidney failure acute\nPred: overload fluid\nActual: kidney disease\nPred: diverticulosis\nActual: paranoia\nPred: diverticulosis\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: migraine disorders\nActual: hypertensive disease\nPred: lymphatic diseases\nActual: hemiparesis\nPred: diverticulosis\nActual: cirrhosis\nPred: diverticulosis\nActual: manic disorder\nPred: neuropathy\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: cardiomyopathy\nActual: paroxysmal dyspnea\nPred: diverticulosis\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: migraine disorders\nActual: confusion\nPred: carcinoma\nActual: gastroesophageal reflux disease\nPred: degenerative polyarthritis\nActual: delirium\nPred: chronic kidney failure\nActual: insufficiency renal\nPred: psychotic disorder\nActual: delusion\nPred: degenerative polyarthritis\nActual: dementia\nPred: neoplasm\nActual: cellulitis\nPred: ulcer peptic\nActual: melanoma\nPred: degenerative polyarthritis\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: ketoacidosis diabetic\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717470255774,
  "history_end_time" : 1717470257491,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "858e8n69nm1",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(\"symptoms\")\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n# Save the test data to files\ndump(X_test, f'{homedir}/research/disease-prediction/X_test.joblib')\ndump(y_test, f'{homedir}/research/disease-prediction/y_test.joblib')\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "symptoms\nIndex(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: psychotic disorder\nActual: bipolar disorder\nPred: hepatitis C\nActual: endocarditis\nPred: failure heart congestive\nActual: pneumonia\nPred: peripheral vascular disease\nActual: ischemia\nPred: adhesion\nActual: colitis\nPred: pancytopenia\nActual: kidney failure acute\nPred: ileus\nActual: kidney disease\nPred: decubitus ulcer\nActual: paranoia\nPred: candidiasis\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: coronary arteriosclerosis\nActual: hypertensive disease\nPred: epilepsy\nActual: hemiparesis\nPred: malignant neoplasms\nActual: cirrhosis\nPred: hypothyroidism\nActual: manic disorder\nPred: deglutition disorder\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: hepatitis C\nActual: paroxysmal dyspnea\nPred: malignant neoplasms\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: incontinence\nActual: confusion\nPred: hemorrhoids\nActual: gastroesophageal reflux disease\nPred: schizophrenia\nActual: delirium\nPred: arthritis\nActual: insufficiency renal\nPred: depression mental\nActual: delusion\nPred: suicide attempt\nActual: dementia\nPred: gout\nActual: cellulitis\nPred: ileus\nActual: melanoma\nPred: hemorrhoids\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: emphysema pulmonary\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717470101542,
  "history_end_time" : 1717470103282,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "q01boqktbin",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(\"symptoms\")\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n# Save the test data to files\ndump(X_test, f'{homedir}/research/disease-prediction/X_test.joblib')\ndump(y_test, f'{homedir}/research/disease-prediction/y_test.joblib')\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "symptoms\nIndex(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: psychotic disorder\nActual: bipolar disorder\nPred: primary carcinoma of the liver cells\nActual: endocarditis\nPred: carcinoma of lung\nActual: pneumonia\nPred: hypercholesterolemia\nActual: ischemia\nPred: effusion pericardial\nActual: colitis\nPred: effusion pericardial\nActual: kidney failure acute\nPred: coronary arteriosclerosis\nActual: kidney disease\nPred: schizophrenia\nActual: paranoia\nPred: hepatitis B\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: gastroenteritis\nActual: hypertensive disease\nPred: accident cerebrovascular\nActual: hemiparesis\nPred: thrombus\nActual: cirrhosis\nPred: schizophrenia\nActual: manic disorder\nPred: pneumothorax\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: carcinoma breast\nActual: paroxysmal dyspnea\nPred: hepatitis B\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: accident cerebrovascular\nActual: confusion\nPred: suicide attempt\nActual: gastroesophageal reflux disease\nPred: chronic alcoholic intoxication\nActual: delirium\nPred: carcinoma breast\nActual: insufficiency renal\nPred: chronic alcoholic intoxication\nActual: delusion\nPred: deep vein thrombosis\nActual: dementia\nPred: stenosis aortic valve\nActual: cellulitis\nPred: osteoporosis\nActual: melanoma\nPred: decubitus ulcer\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: accident cerebrovascular\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717468936007,
  "history_end_time" : 1717468937562,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "1i04k20c401",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(\"symptoms\")\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n# Save the test data to files\ndump(X_test, f'{homedir}/research/disease-prediction/X_test.joblib')\ndump(y_test, f'{homedir}/research/disease-prediction/y_test.joblib')\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "symptoms\nIndex(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: psychotic disorder\nActual: bipolar disorder\nPred: chronic alcoholic intoxication\nActual: endocarditis\nPred: chronic alcoholic intoxication\nActual: pneumonia\nPred: mitral valve insufficiency\nActual: ischemia\nPred: emphysema pulmonary\nActual: colitis\nPred: thrombus\nActual: kidney failure acute\nPred: hyperglycemia\nActual: kidney disease\nPred: depression mental\nActual: paranoia\nPred: hepatitis B\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: diabetes\nActual: hypertensive disease\nPred: accident cerebrovascular\nActual: hemiparesis\nPred: anemia\nActual: cirrhosis\nPred: depression mental\nActual: manic disorder\nPred: cardiomyopathy\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: failure heart congestive\nActual: paroxysmal dyspnea\nPred: hernia\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: pneumonia aspiration\nActual: confusion\nPred: dehydration\nActual: gastroesophageal reflux disease\nPred: gastroenteritis\nActual: delirium\nPred: chronic alcoholic intoxication\nActual: insufficiency renal\nPred: hyperglycemia\nActual: delusion\nPred: hyperglycemia\nActual: dementia\nPred: chronic obstructive airway disease\nActual: cellulitis\nPred: biliary calculus\nActual: melanoma\nPred: gastroenteritis\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: diabetes\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717468820066,
  "history_end_time" : 1717468821788,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "uonvjmh3ymy",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(\"symptoms\")\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n# Save the test data to files\ndump(X_test, f'{homedir}/research/disease-prediction/X_test.joblib')\ndump(y_test, f'{homedir}/research/disease-prediction/y_test.joblib')\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "symptoms\nIndex(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: depression mental\nActual: bipolar disorder\nPred: neutropenia\nActual: endocarditis\nPred: asthma\nActual: pneumonia\nPred: coronary arteriosclerosis\nActual: ischemia\nPred: influenza\nActual: colitis\nPred: diabetes\nActual: kidney failure acute\nPred: affect labile\nActual: kidney disease\nPred: chronic alcoholic intoxication\nActual: paranoia\nPred: thrombocytopaenia\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: diabetes\nActual: hypertensive disease\nPred: hypothyroidism\nActual: hemiparesis\nPred: hepatitis C\nActual: cirrhosis\nPred: depression mental\nActual: manic disorder\nPred: infection urinary tract\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: coronary arteriosclerosis\nActual: paroxysmal dyspnea\nPred: neutropenia\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: incontinence\nActual: confusion\nPred: diabetes\nActual: gastroesophageal reflux disease\nPred: suicide attempt\nActual: delirium\nPred: anemia\nActual: insufficiency renal\nPred: chronic alcoholic intoxication\nActual: delusion\nPred: affect labile\nActual: dementia\nPred: infection\nActual: cellulitis\nPred: affect labile\nActual: melanoma\nPred: hepatitis C\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: accident cerebrovascular\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717468606223,
  "history_end_time" : 1717468608515,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "IO46ab1FquNr",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(\"symptoms\")\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n# Save the test data to files\ndump(X_test, f'{homedir}/research/disease-prediction/X_test.joblib')\ndump(y_test, f'{homedir}/research/disease-prediction/y_test.joblib')\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "symptoms\nIndex(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: suicide attempt\nActual: bipolar disorder\nPred: benign prostatic hypertrophy\nActual: endocarditis\nPred: lymphatic diseases\nActual: pneumonia\nPred: edema pulmonary\nActual: ischemia\nPred: pyelonephritis\nActual: colitis\nPred: hypoglycemia\nActual: kidney failure acute\nPred: decubitus ulcer\nActual: kidney disease\nPred: suicide attempt\nActual: paranoia\nPred: pyelonephritis\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: decubitus ulcer\nActual: hypertensive disease\nPred: pneumonia aspiration\nActual: hemiparesis\nPred: osteoporosis\nActual: cirrhosis\nPred: chronic alcoholic intoxication\nActual: manic disorder\nPred: neuropathy\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: failure heart congestive\nActual: paroxysmal dyspnea\nPred: lymphatic diseases\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: parkinson disease\nActual: confusion\nPred: carcinoma colon\nActual: gastroesophageal reflux disease\nPred: decubitus ulcer\nActual: delirium\nPred: failure heart congestive\nActual: insufficiency renal\nPred: suicide attempt\nActual: delusion\nPred: parkinson disease\nActual: dementia\nPred: exanthema\nActual: cellulitis\nPred: thrombus\nActual: melanoma\nPred: osteoporosis\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: ketoacidosis diabetic\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717375555173,
  "history_end_time" : 1717375556699,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "0rg8mZxFSQ0d",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(\"symptoms\")\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n# Save the test data to files\ndump(X_test, 'X_test.joblib')\ndump(y_test, 'y_test.joblib')\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "symptoms\nIndex(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: benign prostatic hypertrophy\nActual: bipolar disorder\nPred: sickle cell anemia\nActual: endocarditis\nPred: asthma\nActual: pneumonia\nPred: encephalopathy\nActual: ischemia\nPred: thrombus\nActual: colitis\nPred: failure kidney\nActual: kidney failure acute\nPred: decubitus ulcer\nActual: kidney disease\nPred: benign prostatic hypertrophy\nActual: paranoia\nPred: hepatitis C\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: coronary arteriosclerosis\nActual: hypertensive disease\nPred: parkinson disease\nActual: hemiparesis\nPred: hepatitis C\nActual: cirrhosis\nPred: schizophrenia\nActual: manic disorder\nPred: infection urinary tract\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: failure heart congestive\nActual: paroxysmal dyspnea\nPred: carcinoma\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: encephalopathy\nActual: confusion\nPred: adenocarcinoma\nActual: gastroesophageal reflux disease\nPred: encephalopathy\nActual: delirium\nPred: sickle cell anemia\nActual: insufficiency renal\nPred: benign prostatic hypertrophy\nActual: delusion\nPred: aphasia\nActual: dementia\nPred: chronic obstructive airway disease\nActual: cellulitis\nPred: incontinence\nActual: melanoma\nPred: neoplasm metastasis\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: hypertension pulmonary\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717375478940,
  "history_end_time" : 1717375480400,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "PDmE4kkPEWNo",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(\"symptoms\")\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "symptoms\nIndex(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: depression mental\nActual: bipolar disorder\nPred: neoplasm metastasis\nActual: endocarditis\nPred: upper respiratory infection\nActual: pneumonia\nPred: hypercholesterolemia\nActual: ischemia\nPred: neoplasm metastasis\nActual: colitis\nPred: accident cerebrovascular\nActual: kidney failure acute\nPred: chronic kidney failure\nActual: kidney disease\nPred: chronic alcoholic intoxication\nActual: paranoia\nPred: dehydration\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: diabetes\nActual: hypertensive disease\nPred: adenocarcinoma\nActual: hemiparesis\nPred: gastritis\nActual: cirrhosis\nPred: suicide attempt\nActual: manic disorder\nPred: thrombocytopaenia\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: failure heart congestive\nActual: paroxysmal dyspnea\nPred: neoplasm metastasis\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: incontinence\nActual: confusion\nPred: hemorrhoids\nActual: gastroesophageal reflux disease\nPred: adhesion\nActual: delirium\nPred: accident cerebrovascular\nActual: insufficiency renal\nPred: chronic alcoholic intoxication\nActual: delusion\nPred: adhesion\nActual: dementia\nPred: lymphatic diseases\nActual: cellulitis\nPred: lymphatic diseases\nActual: melanoma\nPred: adhesion\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: osteoporosis\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717375183428,
  "history_end_time" : 1717375184990,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Z2LeLGcCZuxO",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(df.columns[0])\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "disease\nIndex(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: psychotic disorder\nActual: bipolar disorder\nPred: coronary arteriosclerosis\nActual: endocarditis\nPred: carcinoma of lung\nActual: pneumonia\nPred: emphysema pulmonary\nActual: ischemia\nPred: neuropathy\nActual: colitis\nPred: chronic kidney failure\nActual: kidney failure acute\nPred: peripheral vascular disease\nActual: kidney disease\nPred: tricuspid valve insufficiency\nActual: paranoia\nPred: thrombus\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: infection urinary tract\nActual: hypertensive disease\nPred: hypertension pulmonary\nActual: hemiparesis\nPred: neoplasm\nActual: cirrhosis\nPred: chronic alcoholic intoxication\nActual: manic disorder\nPred: deglutition disorder\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: diabetes\nActual: paroxysmal dyspnea\nPred: malignant neoplasms\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: infection urinary tract\nActual: confusion\nPred: arthritis\nActual: gastroesophageal reflux disease\nPred: schizophrenia\nActual: delirium\nPred: chronic kidney failure\nActual: insufficiency renal\nPred: anxiety state\nActual: delusion\nPred: septicemia\nActual: dementia\nPred: thrombus\nActual: cellulitis\nPred: carcinoma\nActual: melanoma\nPred: malignant neoplasms\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: hypertension pulmonary\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717374913681,
  "history_end_time" : 1717374915158,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ZVLLiC2BUU9h",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\nprint(cols)\n\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "Index(['shortness of breath', 'dizziness', 'asthenia', 'fall', 'syncope',\n       'vertigo', 'sweat', 'sweating increased', 'palpitation', 'nausea',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=404)\n119 119\n30 30\nPred: depression mental\nActual: bipolar disorder\nPred: failure heart congestive\nActual: endocarditis\nPred: upper respiratory infection\nActual: pneumonia\nPred: encephalopathy\nActual: ischemia\nPred: mitral valve insufficiency\nActual: colitis\nPred: primary carcinoma of the liver cells\nActual: kidney failure acute\nPred: carcinoma\nActual: kidney disease\nPred: personality disorder\nActual: paranoia\nPred: thrombus\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: migraine disorders\nActual: hypertensive disease\nPred: encephalopathy\nActual: hemiparesis\nPred: gout\nActual: cirrhosis\nPred: schizophrenia\nActual: manic disorder\nPred: carcinoma of lung\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: failure heart congestive\nActual: paroxysmal dyspnea\nPred: neoplasm metastasis\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: hypothyroidism\nActual: confusion\nPred: adenocarcinoma\nActual: gastroesophageal reflux disease\nPred: encephalopathy\nActual: delirium\nPred: chronic kidney failure\nActual: insufficiency renal\nPred: tricuspid valve insufficiency\nActual: delusion\nPred: Alzheimer's disease\nActual: dementia\nPred: lymphatic diseases\nActual: cellulitis\nPred: carcinoma\nActual: melanoma\nPred: chronic alcoholic intoxication\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: hypertension pulmonary\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717374511289,
  "history_end_time" : 1717374512812,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "bfhUnFYB0lMj",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\nfrom joblib import dump, load\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "119 119\n30 30\nPred: depression mental\nActual: bipolar disorder\nPred: pyelonephritis\nActual: endocarditis\nPred: bronchitis\nActual: pneumonia\nPred: coronary arteriosclerosis\nActual: ischemia\nPred: chronic kidney failure\nActual: colitis\nPred: primary carcinoma of the liver cells\nActual: kidney failure acute\nPred: chronic obstructive airway disease\nActual: kidney disease\nPred: psychotic disorder\nActual: paranoia\nPred: exanthema\nActual: hepatitis\nPred: acquired immuno-deficiency syndrome\nActual: HIV\nPred: stenosis aortic valve\nActual: hypertensive disease\nPred: accident cerebrovascular\nActual: hemiparesis\nPred: migraine disorders\nActual: cirrhosis\nPred: depression mental\nActual: manic disorder\nPred: hyperglycemia\nActual: lymphoma\nPred: septicemia\nActual: sepsis (invertebrate)\nPred: biliary calculus\nActual: paroxysmal dyspnea\nPred: infection\nActual: malignant neoplasms\nPred: acquired immuno-deficiency syndrome\nActual: hiv infections\nPred: Alzheimer's disease\nActual: confusion\nPred: biliary calculus\nActual: gastroesophageal reflux disease\nPred: schizophrenia\nActual: delirium\nPred: carcinoma of lung\nActual: insufficiency renal\nPred: suicide attempt\nActual: delusion\nPred: parkinson disease\nActual: dementia\nPred: lymphatic diseases\nActual: cellulitis\nPred: tricuspid valve insufficiency\nActual: melanoma\nPred: carcinoma colon\nActual: glaucoma\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: parkinson disease\nActual: transient ischemic attack\n",
  "history_begin_time" : 1717373932730,
  "history_end_time" : 1717373934039,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "3PZvtt6v1vwi",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X_train, y_train)\n\nclf_dt.score(X_train, y_train)\n\ndump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X_test)\ndisease_real = y_test.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "119 119\n30 30\nTraceback (most recent call last):\n  File \"/Users/vangavetisaivivek/gw-workspace/3PZvtt6v1vwi/disease-training.py\", line 33, in <module>\n    dump(clf_dt, f'{homedir}/research/disease-prediction/modal.joblib')\n    ^^^^\nNameError: name 'dump' is not defined\n",
  "history_begin_time" : 1717373894182,
  "history_end_time" : 1717373895540,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "ajA15vx0qugG",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\ncols = df.columns[1:]\n# One Hot Encoded Features\nX = df[cols]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X, y)\n\nclf_dt.score(X, y)\n\n# export_graphviz(dt, \n#                 out_file='./tree.dot', \n#                 feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X)\ndisease_real = y.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "119 119\n30 30\nPred: HIV\nActual: acquired immuno-deficiency syndrome\nPred: biliary calculus\nActual: cholelithiasis\nPred: coronary arteriosclerosis\nActual: coronary heart disease\nPred: depression mental\nActual: depressive disorder\nPred: HIV\nActual: hiv infections\nPred: carcinoma breast\nActual: malignant neoplasm of breast\nPred: carcinoma of lung\nActual: malignant neoplasm of lung\nPred: carcinoma prostate\nActual: malignant neoplasm of prostate\nPred: carcinoma colon\nActual: malignant tumor of colon\nPred: candidiasis\nActual: oral candidiasis\nPred: effusion pericardial\nActual: pericardial effusion body substance\nPred: malignant neoplasms\nActual: primary malignant neoplasm\nPred: sepsis (invertebrate)\nActual: septicemia\nPred: sepsis (invertebrate)\nActual: systemic infection\nPred: tonic-clonic epilepsy\nActual: tonic-clonic seizures\n",
  "history_begin_time" : 1717363883572,
  "history_end_time" : 1717363884878,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "wBJU2upyfZkT",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\n\n# One Hot Encoded Features\nX = df[df.columns[1:]]\n\n# Labels\ny = df['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X, y)\n\nclf_dt.score(X, y)\n\nexport_graphviz(dt, \n                out_file='./tree.dot', \n                feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X)\ndisease_real = y.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "119 119\n30 30\nTraceback (most recent call last):\n  File \"/Users/vangavetisaivivek/gw-workspace/wBJU2upyfZkT/disease-training.py\", line 35, in <module>\n    feature_names=cols)\n                  ^^^^\nNameError: name 'cols' is not defined\n",
  "history_begin_time" : 1717363790503,
  "history_end_time" : 1717363791784,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "rsO9twM025t3",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nimport os\n\nhomedir = os.path.expanduser('~')\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\n\n# One Hot Encoded Features\nX = df_concat[df.columns[1:]]\n\n# Labels\ny = df_concat['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X, y)\n\nclf_dt.score(X, y)\n\nexport_graphviz(dt, \n                out_file='./tree.dot', \n                feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X)\ndisease_real = y.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/vangavetisaivivek/gw-workspace/rsO9twM025t3/disease-training.py\", line 15, in <module>\n    X = df_concat[df.columns[1:]]\n        ^^^^^^^^^\nNameError: name 'df_concat' is not defined\n",
  "history_begin_time" : 1717363758208,
  "history_end_time" : 1717363759578,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "ACszZzXC4cM1",
  "history_input" : "# Write your first Python code in Geoweaver\n# Write your first Python code in Geoweaver\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas as pd\nfrom encoder import homedir\n\ndf = pd.read_csv(f'{homedir}/research/disease-prediction/training-data.csv')\n\n# One Hot Encoded Features\nX = df_concat[cols]\n\n# Labels\ny = df_concat['disease']\n\n\n# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nprint(len(X_train), len(y_train))\n\nprint(len(X_test), len(y_test))\n\ndt = DecisionTreeClassifier()\nclf_dt=dt.fit(X, y)\n\nclf_dt.score(X, y)\n\nexport_graphviz(dt, \n                out_file='./tree.dot', \n                feature_names=cols)\n\n# from graphviz import Source\nfrom sklearn import tree\n\n# graph image related\n# graph = Source(export_graphviz(dt, \n#                 out_file=None, \n#                 feature_names=cols))\n\n# png_bytes = graph.pipe(format='png')\n\n# with open('tree.png','wb') as f:\n#     f.write(png_bytes)\n\n# from IPython.display import Image\n# Image(png_bytes)\n\ndisease_pred = clf_dt.predict(X)\ndisease_real = y.values\n\nfor i in range(0, len(disease_real)):\n    if disease_pred[i]!=disease_real[i]:\n        print ('Pred: {0}\\nActual: {1}\\n'.format(disease_pred[i], disease_real[i]))\n",
  "history_output" : "404\nUnnamed: 0           int64\ndisease             object\nsymptom             object\noccurence_count    float64\ndtype: object\n[328  87  28 ... 361 130 122]\n[[0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]\nlength of onehot encoded 404\n['shortness of breath' 'dizziness' 'asthenia' 'fall' 'syncope' 'vertigo'\n 'sweat' 'sweating increased' 'palpitation' 'nausea' 'angina pectoris'\n 'pressure chest' 'polyuria' 'polydypsia' 'pain chest' 'orthopnea' 'rale'\n 'unresponsiveness' 'mental status changes' 'vomiting' 'labored breathing'\n 'feeling suicidal' 'suicidal' 'hallucinations auditory'\n 'feeling hopeless' 'weepiness' 'sleeplessness' 'motor retardation'\n 'irritable mood' 'blackout' 'mood depressed' 'hallucinations visual'\n 'worry' 'agitation' 'tremor' 'intoxication'\n 'verbal auditory hallucinations' 'energy increased' 'difficulty'\n 'nightmare' 'unable to concentrate' 'homelessness' 'hypokinesia'\n 'dyspnea on exertion' 'chest tightness' 'cough' 'fever'\n 'decreased translucency' 'productive cough' 'pleuritic pain'\n 'yellow sputum' 'breath sounds decreased' 'chill' 'rhonchus'\n 'green sputum' 'non-productive cough' 'wheezing' 'haemoptysis'\n 'distress respiratory' 'tachypnea' 'malaise' 'night sweat'\n 'jugular venous distention' 'dyspnea' 'dysarthria' 'speech slurred'\n 'facial paresis' 'hemiplegia' 'seizure' 'numbness'\n 'symptom aggravating factors' 'st segment elevation'\n 'st segment depression' 't wave inverted' 'presence of q wave'\n 'chest discomfort' 'bradycardia' 'pain' 'nonsmoker' 'erythema'\n 'hepatosplenomegaly' 'pruritus' 'diarrhea' 'abscess bacterial' 'swelling'\n 'apyrexial' 'dysuria' 'hematuria' 'renal angle tenderness' 'lethargy'\n 'hyponatremia' 'hemodynamically stable' 'difficulty passing urine'\n 'consciousness clear' 'guaiac positive' 'monoclonal' 'ecchymosis'\n 'tumor cell invasion' 'haemorrhage' 'pallor' 'fatigue' 'heme positive'\n 'pain back' 'orthostasis' 'arthralgia' 'transaminitis' 'sputum purulent'\n 'hypoxemia' 'hypercapnia' 'patient non compliance' 'unconscious state'\n 'bedridden' 'abdominal tenderness' 'unsteady gait' 'hyperkalemia'\n 'urgency of\\xa0micturition' 'ascites' 'hypotension' 'enuresis'\n 'asterixis' 'muscle twitch' 'sleepy' 'headache' 'lightheadedness'\n 'food intolerance' 'numbness of hand' 'general discomfort' 'drowsiness'\n 'stiffness' 'prostatism' 'weight gain' 'tired' 'mass of body structure'\n 'has religious belief' 'nervousness' 'formication' 'hot flush' 'lesion'\n 'cushingoid facies' 'cushingoid\\xa0habitus' 'emphysematous change'\n 'decreased body weight' 'hoarseness' 'thicken'\n 'spontaneous rupture of membranes' 'muscle hypotonia' 'hypotonic'\n 'redness' 'hypesthesia' 'hyperacusis' 'scratch marks' 'sore to touch'\n 'burning sensation' 'satiety early' 'throbbing sensation quality'\n 'sensory discomfort' 'constipation' 'pain abdominal' 'heartburn'\n 'breech presentation' 'cyanosis' 'pain in lower limb' 'cardiomegaly'\n 'clonus' 'unwell' 'anorexia' 'history of - blackout' 'anosmia'\n 'metastatic lesion' 'hemianopsia homonymous' 'hematocrit decreased'\n 'neck stiffness' 'cicatrisation' 'hypometabolism' 'aura' 'myoclonus'\n 'gurgle' 'wheelchair bound' 'left\\xa0atrial\\xa0hypertrophy' 'oliguria'\n 'catatonia' 'unhappy' 'paresthesia' 'gravida 0' 'lung nodule'\n 'distended abdomen' 'ache' 'macerated skin' 'heavy feeling' 'rest pain'\n 'sinus rhythm' 'withdraw' 'behavior hyperactive' 'terrify' 'photopsia'\n 'giddy mood' 'disturbed family' 'hypersomnia' 'hyperhidrosis disorder'\n 'mydriasis' 'extrapyramidal sign' 'loose associations' 'exhaustion'\n 'snore' 'r wave feature' 'overweight' 'systolic murmur' 'asymptomatic'\n 'splenomegaly' 'bleeding of vagina' 'macule' 'photophobia'\n 'painful swallowing' 'cachexia' 'hypocalcemia result'\n 'hypothermia, natural' 'atypia' 'general unsteadiness' 'throat sore'\n 'snuffle' 'hacking cough' 'stridor' 'paresis' 'aphagia' 'focal seizures'\n 'abnormal sensation' 'stupor' 'fremitus' \"Stahli's line\"\n 'stinging sensation' 'paralyse' 'hirsutism' 'sniffle' 'bradykinesia'\n 'out of breath' 'urge incontinence' 'vision blurred' 'room spinning'\n 'rambling speech' 'clumsiness' 'decreased stool caliber' 'hematochezia'\n 'egophony' 'scar tissue' 'neologism' 'decompensation'\n 'stool color yellow' 'rigor - temperature-associated observation'\n 'paraparesis' 'moody' 'fear of falling' 'spasm' 'hyperventilation'\n 'excruciating pain' 'gag' 'posturing' 'pulse absent' 'dysesthesia'\n 'polymyalgia' 'passed stones' 'qt interval prolonged' 'ataxia'\n \"Heberden's node\" 'hepatomegaly' 'sciatica' 'frothy sputum'\n 'mass in breast' 'retropulsion' 'estrogen use' 'hypersomnolence'\n 'underweight' 'dullness' 'red blotches' 'colic abdominal' 'hypokalemia'\n 'hunger' 'prostate tender' 'pain foot' 'urinary hesitation'\n 'disequilibrium' 'flushing' 'indifferent mood' 'urinoma'\n 'hypoalbuminemia' 'pustule' 'slowing of urinary stream'\n 'extreme exhaustion' 'no status change' 'breakthrough pain'\n 'pansystolic murmur' 'systolic ejection murmur' 'stuffy nose'\n 'barking cough' 'rapid shallow breathing' 'noisy respiration'\n 'nasal discharge present' 'frail' 'cystic lesion' 'projectile vomiting'\n 'heavy legs' 'titubation' 'dysdiadochokinesia' 'achalasia' 'side pain'\n 'monocytosis' 'posterior\\xa0rhinorrhea' 'incoherent' 'lameness'\n 'claudication' 'clammy skin' 'mediastinal shift' 'nausea and vomiting'\n 'awakening early' 'tenesmus' 'fecaluria' 'pneumatouria' 'todd paralysis'\n 'alcoholic withdrawal symptoms' 'myalgia' 'dyspareunia' 'poor dentition'\n 'floppy' 'inappropriate affect' 'poor feeding' 'moan' 'welt' 'tinnitus'\n 'hydropneumothorax' 'superimposition' 'feeling strange' 'uncoordination'\n 'absences finding' 'tonic seizures' 'debilitation' 'impaired cognition'\n 'drool' 'pin-point pupils' 'tremor resting' 'groggy' 'adverse reaction'\n 'adverse effect' 'abdominal bloating' 'fatigability' 'para 2' 'abortion'\n 'intermenstrual heavy bleeding' 'previous pregnancies 2' 'primigravida'\n 'abnormally hard consistency' 'proteinemia' 'pain neck' 'dizzy spells'\n 'shooting pain' 'hyperemesis' 'milky' 'regurgitates after swallowing'\n 'lip smacking' 'phonophobia' 'rolling of eyes' 'ambidexterity'\n 'pulsus\\xa0paradoxus' 'gravida 10' 'bruit' 'breath-holding spell'\n 'scleral\\xa0icterus' 'retch' 'blanch' 'elation'\n 'verbally abusive behavior' 'transsexual'\n 'behavior showing increased motor activity' 'coordination abnormal'\n 'choke' 'bowel sounds decreased' 'no known drug allergies'\n 'low back pain' 'charleyhorse' 'sedentary' 'feels hot/feverish' 'flare'\n 'pericardial friction rub' 'hoard' 'panic' 'cardiovascular finding'\n 'cardiovascular event' 'soft tissue swelling' 'rhd positive' 'para 1'\n 'nasal flaring' 'sneeze' 'hypertonicity' \"Murphy's sign\" 'flatulence'\n 'gasping for breath' 'feces in rectum' 'prodrome' 'hypoproteinemia'\n 'alcohol binge episode' 'abdomen acute' 'air fluid level'\n 'catching breath' 'large-for-dates fetus' 'immobile' 'homicidal thoughts']\nEmpty DataFrame\nColumns: [shortness of breath, dizziness, asthenia, fall, syncope, vertigo, sweat, sweating increased, palpitation, nausea, angina pectoris, pressure chest, polyuria, polydypsia, pain chest, orthopnea, rale, unresponsiveness, mental status changes, vomiting, labored breathing, feeling suicidal, suicidal, hallucinations auditory, feeling hopeless, weepiness, sleeplessness, motor retardation, irritable mood, blackout, mood depressed, hallucinations visual, worry, agitation, tremor, intoxication, verbal auditory hallucinations, energy increased, difficulty, nightmare, unable to concentrate, homelessness, hypokinesia, dyspnea on exertion, chest tightness, cough, fever, decreased translucency, productive cough, pleuritic pain, yellow sputum, breath sounds decreased, chill, rhonchus, green sputum, non-productive cough, wheezing, haemoptysis, distress respiratory, tachypnea, malaise, night sweat, jugular venous distention, dyspnea, dysarthria, speech slurred, facial paresis, hemiplegia, seizure, numbness, symptom aggravating factors, st segment elevation, st segment depression, t wave inverted, presence of q wave, chest discomfort, bradycardia, pain, nonsmoker, erythema, hepatosplenomegaly, pruritus, diarrhea, abscess bacterial, swelling, apyrexial, dysuria, hematuria, renal angle tenderness, lethargy, hyponatremia, hemodynamically stable, difficulty passing urine, consciousness clear, guaiac positive, monoclonal, ecchymosis, tumor cell invasion, haemorrhage, pallor, ...]\nIndex: []\n[0 rows x 404 columns]\n   shortness of breath  dizziness  ...  immobile  homicidal thoughts\n0                  0.0        0.0  ...       0.0                 0.0\n1                  0.0        0.0  ...       0.0                 0.0\n2                  0.0        0.0  ...       0.0                 0.0\n3                  0.0        0.0  ...       0.0                 0.0\n4                  0.0        0.0  ...       0.0                 0.0\n[5 rows x 404 columns]\nohe 2126\n0    hypertensive disease\n1    hypertensive disease\n2    hypertensive disease\n3    hypertensive disease\n4    hypertensive disease\nName: disease, dtype: object\n                disease  shortness of breath  ...  immobile  homicidal thoughts\n0  hypertensive disease                  0.0  ...       0.0                 0.0\n1  hypertensive disease                  0.0  ...       0.0                 0.0\n2  hypertensive disease                  0.0  ...       0.0                 0.0\n3  hypertensive disease                  0.0  ...       0.0                 0.0\n4  hypertensive disease                  0.0  ...       0.0                 0.0\n[5 rows x 405 columns]\n                disease  shortness of breath  ...  immobile  homicidal thoughts\n0  hypertensive disease                  0.0  ...       0.0                 0.0\n1  hypertensive disease                  0.0  ...       0.0                 0.0\n2  hypertensive disease                  0.0  ...       0.0                 0.0\n3  hypertensive disease                  0.0  ...       0.0                 0.0\n4  hypertensive disease                  0.0  ...       0.0                 0.0\n[5 rows x 405 columns]\n2112\nIndex(['disease', 'shortness of breath', 'dizziness', 'asthenia', 'fall',\n       'syncope', 'vertigo', 'sweat', 'sweating increased', 'palpitation',\n       ...\n       'feces in rectum', 'prodrome', 'hypoproteinemia',\n       'alcohol binge episode', 'abdomen acute', 'air fluid level',\n       'catching breath', 'large-for-dates fetus', 'immobile',\n       'homicidal thoughts'],\n      dtype='object', length=405)\n                               disease  ...  homicidal thoughts\n0                  Alzheimer's disease  ...                 0.0\n1                                  HIV  ...                 0.0\n2       Pneumocystis carinii pneumonia  ...                 1.0\n3             accident cerebrovascular  ...                 0.0\n4  acquired immuno-deficiency syndrome  ...                 0.0\n[5 rows x 405 columns]\ntraining data successfully created\nTraceback (most recent call last):\n  File \"/Users/vangavetisaivivek/gw-workspace/ACszZzXC4cM1/disease-training.py\", line 13, in <module>\n    X = df_concat[cols]\n        ^^^^^^^^^\nNameError: name 'df_concat' is not defined\n",
  "history_begin_time" : 1717363615450,
  "history_end_time" : 1717363617428,
  "history_notes" : null,
  "history_process" : "frv7ut",
  "host_id" : null,
  "indicator" : "Failed"
},]
